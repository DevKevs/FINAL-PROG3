@page "/Tienda/Carrito"
@using FinalAmadis.Data
@using System.Net
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime

<div style="box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;" class="container mt-2 p-3 rounded cart">
    <div class="row no-gutters">
        <div class="col-md-8">
            <div class="product-details mr-2">
                <div style="cursor:pointer;" class="d-flex flex-row align-items-center"><a href="/Tienda"><i class="fa fa-long-arrow-left"></i><span class="ml-2">Continuar comprando</span></a></div>
                <hr>
                <h6 class="mb-0">Carrito de compras</h6>
                <div class="d-flex justify-content-between">
                    <span>Tienes "VARIABLE" productos en tu carrito </span>
                    <div class="d-flex flex-row align-items-center">
                        <span class="text-black-50">Filtrar por:</span>
                        <div class="price ml-2"><span class="mr-1">precio</span><i class="fa fa-angle-down"></i></div>
                    </div>
                </div>
                @if (Datos != null)
                {
                    foreach (var i in Datos)
                    {
                        <div class="d-flex justify-content-between align-items-center mt-3 p-2 items rounded">
                            <div class="d-flex flex-row">
                                <img class="rounded" src="@i.Foto" width="40">
                                <div class="ml-2"><span class="font-weight-bold d-block">@i.Nombre_producto</span><span class="spec">@i.Descripcion</span></div>
                            </div>
                            <div class="d-flex flex-row align-items-center"><span class="d-block">@i.Cantidad</span><span class="d-block ml-5 font-weight-bold">$@i.Suma_total</span><i style="cursor: pointer; color: red;" class="fa fa-trash-o ml-3 text-red-50"></i></div>
                        </div>

                    }

                }
                @if (Datos == null)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden"></span>
                        </div>
                    </div>
                }

            </div>
        </div>
        <div style="box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;" class="col-md-4">
            <div class="payment-info">
                <div class="d-flex justify-content-between align-items-center"><span>Detalles de tarjeta</span><i class="fas fa-user-circle"></i></div><span class="type d-block mt-3 mb-1">Tipo</span><label class="radio"> <input type="radio" name="card" value="payment" checked> <span><img width="30" src="https://img.icons8.com/color/48/000000/mastercard.png" /></span> </label>
                <label class="radio"> <input type="radio" name="card" value="payment"> <span><img width="30" src="https://img.icons8.com/officel/48/000000/visa.png" /></span> </label>
                <label class="radio"> <input type="radio" name="card" value="payment"> <span><img width="30" src="https://img.icons8.com/ultraviolet/48/000000/amex.png" /></span> </label>
                <label class="radio"> <input type="radio" name="card" value="payment"> <span><img width="30" src="https://img.icons8.com/officel/48/000000/paypal.png" /></span> </label>
                <div><label class="credit-card-label">Nombre del propietario</label><input type="text" class="form-control credit-inputs" placeholder="Nombre"></div>
                <div><label class="credit-card-label">Numero de tarjeta</label><input type="text" class="form-control credit-inputs" placeholder="0000 0000 0000 0000"></div>
                <div class="row">
                    <div class="col-md-6"><label class="credit-card-label">Fecha</label><input type="text" class="form-control credit-inputs" placeholder="12/24"></div>
                    <div class="col-md-6"><label class="credit-card-label">CVV</label><input type="text" class="form-control credit-inputs" placeholder="342"></div>
                </div>
                <hr class="line">
                <div class="d-flex justify-content-between information"><span>Subtotal</span><span>$"VARIABLE"</span></div>
                <div class="d-flex justify-content-between information"><span>Envío</span><span>$00.00</span></div>
                <div class="d-flex justify-content-between information"><span>Total(Incl. taxes)</span><span>$"VARIABLE"</span></div><button class="btn btn-info btn-block d-flex justify-content-between mt-3" type="button"><span>$"VARIABLE"</span><span>Pagar <i class="fa fa-long-arrow-right ml-1"></i></span></button>
            </div>
        </div>
    </div>
</div>
@*<button @onclick="@ojo">prueba</button>*@
<label>@myUrl</label>
@code {
    public dynamic Datos { get; set; }
    public dynamic StorageData { get; set; }
    string myUrl;

    //protected override async Task OnInitializedAsync()
    //{
    //    try
    //    {
    //        if (StorageData != null)
    //        {
    //            myUrl = "https://super-mini-market.herokuapp.com/api/Detalles_Carrito/" + StorageData.IdUsuario;
    //            Uri url = new Uri(myUrl);
    //            WebClient client = new WebClient();
    //            var data = await client.DownloadStringTaskAsync(url);
    //            Datos = JsonConvert.DeserializeObject(data);

    //        }
    //        else
    //        {

    //            var storage = await JSRuntime.InvokeAsync<string>("storagePicker");
    //            StorageData = JsonConvert.DeserializeObject(storage);
    //            StateHasChanged();
    //            await pruba();

    //        }




    //    }
    //    catch (Exception)
    //    {
    //        throw;
    //    }

    //}
    async Task pruba()
    {
        try
        {
            myUrl = "https://super-mini-market.herokuapp.com/api/Detalles_Carrito/" + StorageData.IdUsuario;
            Uri url = new Uri(myUrl);
            WebClient client = new WebClient();
            var data = await client.DownloadStringTaskAsync(url);
            Datos = JsonConvert.DeserializeObject(data);

        }
        catch (Exception)
        {
            throw;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var storage = await JSRuntime.InvokeAsync<string>("storagePicker");
                StorageData = JsonConvert.DeserializeObject(storage);

                myUrl = "https://super-mini-market.herokuapp.com/api/Detalles_Carrito/" + StorageData.IdUsuario;
                Uri url = new Uri(myUrl);
                WebClient client = new WebClient();
                var data = await client.DownloadStringTaskAsync(url);
                Datos = JsonConvert.DeserializeObject(data);
                StateHasChanged();


            }
            catch (Exception)
            {

                throw;
            }
        }
    }
    async Task ojo()
    {
        var storage = await JSRuntime.InvokeAsync<string>("storagePicker");
        StorageData = JsonConvert.DeserializeObject(storage);
        await pruba();

    }
}