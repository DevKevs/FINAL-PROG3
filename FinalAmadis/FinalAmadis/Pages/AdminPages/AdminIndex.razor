@page "/admin"
@using ChartJs.Blazor.PieChart
@using FinalAmadis.Data
@using System.Net
@using Newtonsoft.Json
@using Microsoft.Extensions.Logging
@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger
@inject IJSRuntime JSRuntime

<h1>Admin Panel</h1>
@if (Datos != null)
{
    <div class="row">
        <div class="col">
            <h5>Usuarios conectados: @Datos.Conectados[0]</h5>
        </div>
        <div class="col">
            <Chart Config="_config"></Chart> 
        </div>
    </div>
}
@if (Datos == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
    </div>
}

@code{

    public dynamic Datos { get; set; }
    public dynamic Editable { get; set; }
    string jsonString;
    Api consume = new Api();
    private PieConfig _config;
    public string Buscar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Uri url = new Uri("https://super-mini-market.herokuapp.com/api/Mostrar_Conectados");
            WebClient client = new WebClient();
            var data = await client.DownloadStringTaskAsync(url);
            Datos = JsonConvert.DeserializeObject(data);
            LoadChart();
        }
        catch (Exception)
        {
            throw;
        }
    }
    public void LoadChart()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Grafica de usuarios"
                }
            }
        };

        foreach (string color in new[] { "Conectados", "Desconectados" })
        {
            _config.Data.Labels.Add(color);
        }
        int dato1 = Convert.ToInt32(Datos.Conectados[0]);
        int dato2 = Convert.ToInt32(Datos.Desconectados[0]);
        PieDataset<int> dataset = new PieDataset<int>(new[] { dato1, dato2 })
        {
            BackgroundColor = new[]
        {
            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
        }
        };

        _config.Data.Datasets.Add(dataset);
    }
}