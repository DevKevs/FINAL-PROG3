@page "/admin"
@using ChartJs.Blazor.PieChart
@using FinalAmadis.Data
@using System.Net
@using Newtonsoft.Json
@using Microsoft.Extensions.Logging
@using System.ComponentModel.DataAnnotations;
@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger
@inject IJSRuntime JSRuntime


@if (Datos != null)
{

    <div class="row">
        <div class="col-12 col-sm-6 col-md-8">
            <div class="card">
                <div class="card-header" style="background-color: #fff">
                    <h4>Pedidos en curso</h4>
                </div>
                <div class="card-body">
                    <table class="table table-dark table-borderless">
                        <thead>
                            <tr>
                                <th>Cliente</th>
                                <th>Telefono</th>
                                <th>Estado</th>
                                <th class="text-center">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Pedidos != null)
                            {
                                @foreach (var prov in Pedidos.data)
                                {
                                    <tr>
                                        <td>@prov.Nombre @prov.Apellido</td>
                                        <td>@prov.Telefono</td>
                                        <td>@prov.Estado</td>
                                        <td>
                                            <button title="Editar" @onclick="@(async()=> await data(prov))" class="btn btn-success mb-2" data-toggle="modal" data-target="#exampleModal2"><i class="fas fa-edit"></i></button>
                                            <button title="ver producto" @onclick="@(async()=> await data(prov))" data-toggle="modal" data-target="#exampleModal3" class="btn btn-info mb-2"><i class="fas fa-eye"></i></button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-4">
            <div class="card">
                <div class="card-header" style="background-color: #fff">
                    <h4>Actividad</h4>
                </div>
                <div class="card-body ">
                    <Chart Config="_config"></Chart>
                </div>
            </div>
            <div class="col p-0">
                <div class="card mt-1">
                    <div class="card-header" style="background-color: #fff">
                        <h4>Disponible</h4>
                    </div>
                    <div class="card-body">
                        disponible
                    </div>
                </div>
            </div>
        </div>
    </div>


}
@if (Datos == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
    </div>
}

<div class="modal fade" id="exampleModal2" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Editar orden</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <label for="Estado">Actualizar el pedido de @_actualizar.NombreCliente</label>
                <EditForm Model="@_actualizar" OnValidSubmit="@UpdateEstate">
                    <DataAnnotationsValidator />
                    <InputSelect name="Estado" id="Drop" @bind-Value="@_actualizar.Estado" class="form-control">
                        <option value="" selected disabled>Seleccione el estado</option>
                        <option value="En proceso">En proceso</option>
                        <option value="Enviado">Enviado</option>
                        <option value="Completado">Completado</option>
                    </InputSelect>
                    <ValidationMessage For=@(() => _actualizar.Estado) />
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                        <button type="submit" class="btn btn-primary">Guardar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModal3" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Detalles de productos pagos</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h4>Productos pagados por @_actualizar.NombreCliente</h4>
                @if (Productos_pagos != null && Productos_pagos.ok == true)
                {
                    
                    foreach (var i in Productos_pagos.data)
                    {

                        <div class="d-flex justify-content-between align-items-center mt-3 p-2 items rounded">
                            <div class="d-flex flex-row">
                                <img class="rounded img-fluid" src="@i.Foto" width="50" height="50">
                                <div class="ml-2"><span class="font-weight-bold d-block">@i.Nombre_producto</span><span class="spec">@i.Descripcion</span></div>
                            </div>
                            <div class="d-flex flex-row align-items-center"><span class="d-block">@i.Cantidad</span><span class="d-block ml-5 font-weight-bold">$@i.Suma_total</span></div>
                        </div>

                    }
                }
                @if(Productos_pagos == null)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden"></span>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@code{

    public dynamic Datos { get; set; }
    public dynamic Pedidos { get; set; }
    public dynamic Editable { get; set; }
    public dynamic Productos_pagos { get; set; }
    string jsonString;
    Pago pedidos = new Pago();
    Api consume = new Api();
    Actualizar _actualizar = new Actualizar();
    private PieConfig _config;
    public string Buscar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Uri url = new Uri("https://super-mini-market.herokuapp.com/api/Mostrar_Conectados");
            WebClient client = new WebClient();
            var data = await client.DownloadStringTaskAsync(url);
            Datos = JsonConvert.DeserializeObject(data);
            await LoadPedidos();
            LoadChart();
        }
        catch (Exception)
        {
            throw;
        }
    }
    public void LoadChart()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true
                }
            }
        };

        foreach (string color in new[] { "Conectados", "Desconectados" })
        {
            _config.Data.Labels.Add(color);
        }
        int dato1 = Convert.ToInt32(Datos.Conectados[0]);
        int dato2 = Convert.ToInt32(Datos.Desconectados[0]);
        PieDataset<int> dataset = new PieDataset<int>(new[] { dato1, dato2 })
        {
            BackgroundColor = new[]
        {
            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
        }
        };

        _config.Data.Datasets.Add(dataset);
    }
    async Task LoadPedidos()
    {
        try
        {
            Uri url = new Uri("https://super-mini-market.herokuapp.com/api/Seleccionar_Pedidos");
            WebClient client = new WebClient();
            var data = await client.DownloadStringTaskAsync(url);
            Pedidos = JsonConvert.DeserializeObject(data);

        }
        catch (Exception)
        {

            throw;
        }
    }
    class Actualizar
    {
        public string IdOrden { get; set; }

        [Required(ErrorMessage = "El estado es requerido")]
        public string Estado { get; set; }

        public string NombreCliente { get; set; }
    }
    public async Task<dynamic> data(dynamic select)
    {

        await Task.Delay(10);
        if (select != null)
        {
            pedidos.IdUsuario = select.IdUsuarios;
            pedidos.Estado = select.Estado;
            pedidos.Longitud = select.Longitud;
            pedidos.Latitud = select.Latitud;
            _actualizar.IdOrden = select.IdOrden;
            _actualizar.Estado = select.Estado;
            _actualizar.NombreCliente = $"{select.Nombre} {select.Apellido}";
            await ProductosPagados();
        }
        return null;
    }
    async Task UpdateEstate()
    {
        try
        {

            string jsonString = JsonConvert.SerializeObject(_actualizar);
            Uri url = new Uri("https://super-mini-market.herokuapp.com/api/Actualizar_Pedidos");
            WebClient client = new WebClient();
            var data = await client.UploadStringTaskAsync(url, jsonString);
            Editable = JsonConvert.DeserializeObject(data);
            if (Editable != null)
            {
                await LoadPedidos();
                Mensajes();
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    private async Task Mensajes()
    {
        if (Editable.ok == true)
        {
            await JSRuntime.InvokeVoidAsync("Confirmar", "success", "¡Exito!", "Tracking actualizado!");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("Confirmar", "error", "Vaya!", "Ocurrio un error...");
        }

    }
    async Task ProductosPagados()
    {
        try
        {
            string MyUrl = "https://super-mini-market.herokuapp.com/api/Detalles_Carrito_Producto_Pagado/" + pedidos.IdUsuario;
            Uri url = new Uri(MyUrl);
            WebClient client = new WebClient();
            var data = await client.DownloadStringTaskAsync(url);
            Productos_pagos = JsonConvert.DeserializeObject(data);
        }
        catch (Exception)
        {

            throw;
        }
    }
}