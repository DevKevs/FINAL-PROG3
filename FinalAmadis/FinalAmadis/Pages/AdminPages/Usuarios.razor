@page "/Usuarios"
@using FinalAmadis.Data
@using System.Net
@using Newtonsoft.Json
@using Microsoft.Extensions.Logging
@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger
@inject IJSRuntime JSRuntime
<div class="card">
    <div class="card-header" style="background-color: #fff">
        <div class="row">
            <div class="col d-inline">
                <h3>Usuarios</h3>
            </div>
            <div class="col d-inline">
                <button title="Nuevo Administrador" @onclick="Clear" class="btn btn-success mr-2 d-inline float-right" data-toggle="modal" data-target="#AgregarProducto"><i class="fas fa-plus-square"></i> Agregar Usuario</button>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="col-12">
            <div class="form-group">
                <input class="form-control" type="text" placeholder="Buscar"
                       @bind="Buscar"
                       @bind:event="oninput">
            </div>
            <table class="table table-dark table-borderless">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Apelliddo</th>
                        <th>Fecha de nacimiento</th>
                        <th>Correo</th>
                        <th>Rol</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Datos != null)
                    {
                        @foreach (var prov in Datos)
                        {
                            if (!IsVisible(prov))
                                continue;
                            <tr>
                                <td>@prov.Nombre_Usuario</td>
                                <td>@prov.Apellido_Usuario</td>
                                <td>@prov.Fecha_Nacimiento</td>
                                <td>@prov.Correo</td>
                                <td>@prov.Rol</td>
                                <td>
                                    @if (prov.Rol != "SuperAdmin")
                                    {
                                        <button title="Hacer admin" @onclick="@(async()=> await data(prov))" class="btn btn-success mr-2" data-toggle="modal" data-target="#exampleModal"><i class="fas fa-edit"></i></button>
                                        <button title="Eliminar" @onclick="@(async()=> await data(prov))" data-toggle="modal" data-target="#EliminarProducto" class="btn btn-danger"><i class="fas fa-trash-alt"></i></button>
                                    }
                                    else
                                    {
                                        <button title="No puedes actualizar tu rol" disabled class="btn btn-success mr-2" data-toggle="modal" data-target="#exampleModal"><i class="fas fa-edit"></i></button>
                                        <button title="No te puedes eliminar a un SuperAdmin" disabled data-toggle="modal" data-target="#EliminarProducto" class="btn btn-danger"><i class="fas fa-trash-alt"></i></button>
                                    }
                                </td>
                            </tr>
                        }
                    }


                </tbody>
            </table>
            @if (Datos == null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden"></span>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<!-- Modal editar categria-->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Editar Usuario</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h4>Cambiar el rol a "@user.Correo"</h4>
                <select id="Drop" @bind="Rol" class="form-control">
                    <option value="00" disabled>Seleccione el Rol</option>
                    <option value="Administrador">Administrador</option>
                    <option value="Cliente">Cliente</option>
                </select>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                <button type="submit"@onclick="Handleupdate" class="btn btn-primary">Guardar Cambios</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal eliminar categoria-->
<div class="modal fade" id="EliminarProducto" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Eliminar Usuario</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h3>¿Esta seguro de eliminar la cuenta de "@user.Nombre"?</h3>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
                <button type="button" @onclick="HandleDelete" class="btn btn-danger">Si</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal agregar usuario-->
<div class="modal fade" id="AgregarProducto" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Agregar Usuario</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@user" OnValidSubmit="@RegisterUser">
                    <DataAnnotationsValidator />
                    <div class="col-12 row mb-2">
                        <InputText id="Correo" type="text" placeholder="Nombre" class="form-control" @bind-Value="user.Nombre" />
                        <ValidationMessage For=@(() => user.Nombre) />
                    </div>
                    <div class="col-12 row mb-2">
                        <InputText id="Correo" type="text" placeholder="Apellido" class="form-control" @bind-Value="user.Apellido" />
                        <ValidationMessage For=@(() => user.Apellido) />
                    </div>
                    <div class="col-12 row mb-2">
                        <InputDate id="Correo" type="date" placeholder="Fecha nacimiento" class="form-control" @bind-Value="fecha" />
                    </div>
                    <div class="col-12 row mb-2">
                        <InputText id="Correo" type="email" placeholder="Direccion de correo" class="form-control" @bind-Value="user.Correo" />
                        <ValidationMessage For=@(() => user.Correo) />
                    </div>
                    <div class="col-12 row mb-2">
                        <InputText id="Correo" type="password" placeholder="Contraseña" class="form-control" @bind-Value="user.Contraseña" />
                        <ValidationMessage For=@(() => user.Contraseña) />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Guardar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    public dynamic Datos { get; set; }
    public dynamic Editable { get; set; }
    string jsonString;
    string Rol;
    public dynamic StorageData { get; set; }
    private RegistroUsuario user = new RegistroUsuario();
    DateTime fecha;
    Api consume = new Api();
    public string Buscar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Uri url = new Uri("https://super-mini-market.herokuapp.com/api/Mostrar_Usuarios");
            WebClient client = new WebClient();
            var data = await client.DownloadStringTaskAsync(url);
            Datos = JsonConvert.DeserializeObject(data);

        }
        catch (Exception)
        {

            throw;
        }

    }
    protected async Task Reload()
    {
        try
        {
            Uri url = new Uri("https://super-mini-market.herokuapp.com/api/Mostrar_Usuarios");
            WebClient client = new WebClient();
            var data = await client.DownloadStringTaskAsync(url);
            Datos = JsonConvert.DeserializeObject(data);

        }
        catch (Exception)
        {

            throw;
        }

    }
    public bool IsVisible(dynamic cate)
    {
        if (string.IsNullOrEmpty(Buscar))
            return true;
        if (cate.Nombre_Usuario.ToString().Contains(Buscar, StringComparison.OrdinalIgnoreCase))
            return true;
        if (cate.Apellido_Usuario.ToString().Contains(Buscar, StringComparison.OrdinalIgnoreCase))
            return true;
        if (cate.Fecha_Nacimiento.ToString().Contains(Buscar, StringComparison.OrdinalIgnoreCase))
            return true;
        if (cate.Correo.ToString().Contains(Buscar, StringComparison.OrdinalIgnoreCase))
            return true;
        if (cate.Rol.ToString().Contains(Buscar, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    public async Task RegisterUser()
    {
        try
        {
            user.Rol = "Administrador";
            user.Fecha_Nacimiento = fecha.ToString("dd/MM/yyyy");
            jsonString = JsonConvert.SerializeObject(user);
            string myUrl = "https://super-mini-market.herokuapp.com/api/Registro_Admins/" + StorageData.IdUsuario;
            Uri url = new Uri(myUrl);
            WebClient client = new WebClient();
            var data = await client.UploadStringTaskAsync(url, jsonString);
            Editable = JsonConvert.DeserializeObject(data);
            if (Editable != null)
            {
                Datos = null;
                await Reload();
                Mensajes();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    public async Task Handleupdate()
    {
        try
        {
            DeleteUser modificar = new DeleteUser();
            modificar.IdAdmin = StorageData.IdUsuario;
            modificar.IdUsuario = user.IdUsuario.ToString();
            jsonString = JsonConvert.SerializeObject(modificar);
            string myUrl = "https://super-mini-market.herokuapp.com/api/Modificar_Usuarios/" + Rol;
            Uri url = new Uri(myUrl);
            WebClient client = new WebClient();
            var data = await client.UploadStringTaskAsync(url, jsonString);
            Editable = JsonConvert.DeserializeObject(data);
            if (Editable != null)
            {
                Datos = null;
                await Reload();
                Mensajes();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    private async Task HandleDelete()
    {
        try
        {
            DeleteUser borrado = new DeleteUser();
            borrado.IdAdmin = StorageData.IdUsuario;
            borrado.IdUsuario = user.IdUsuario.ToString();

            jsonString = JsonConvert.SerializeObject(borrado);
            Uri url = new Uri("https://super-mini-market.herokuapp.com/api/Borrar_Usuarios");
            WebClient client = new WebClient();
            var data = await client.UploadStringTaskAsync(url, jsonString);
            Editable = JsonConvert.DeserializeObject(data);
            if (Editable != null)
            {
                Datos = null;
                await Reload();
                Mensajes();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    public async Task<dynamic> data(dynamic select)
    {

        await Task.Delay(10);
        if (select != null)
        {
            user.IdUsuario = select.IdUsuario;
            user.Nombre = select.Nombre_Usuario;
            user.Correo = select.Correo;
        }
        return null;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var storage = await JSRuntime.InvokeAsync<string>("storagePicker");
                StorageData = JsonConvert.DeserializeObject(storage);
                StateHasChanged();
            }
            catch (Exception)
            {

                throw;
            }
        }
    }
    private async Task Mensajes()
    {
        if (Editable.ok == true)
        {
            await JSRuntime.InvokeVoidAsync("Confirmar", "success", "¡Exito!", "Su solicitud fue aprobada!");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("Confirmar", "error", "Vaya!", "Ocurrio un error...");
        }

    }
    public void Clear()
    {
        user = new RegistroUsuario();
    }
}